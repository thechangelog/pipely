varnishtest "Test cache-status header"

# App mock server
server s1 {
  rxreq
  expect req.url == "/health"
  txresp -status 200 -body "App OK"

  rxreq
  expect req.url == "/"
  txresp -status 200 -body "App homepage"
} -start

# Feeds mock server
server s2 {
  rxreq
  expect req.url == "/health"
  txresp -status 200 -body "Feeds OK"

  rxreq
  expect req.url == "/podcast.xml"
  txresp -status 200 -body "podcast.xml"
} -start

# Assets mock server
server s3 {
  rxreq
  expect req.url == "/health"
  txresp -status 200 -body "Assets OK"

  rxreq
  expect req.url == "/static/images/podcasts/podcast-original-f16d0363067166f241d080ee2e2d4a28.png"
  txresp -status 200 -body "podcast-original-f16d0363067166f241d080ee2e2d4a28.png"
} -start

# Start Varnish with a VCL close to our final one
# FWIW, we don't use dynamic directors so that we don't need to handle variable timing & delay
varnish v1 -vcl {
  vcl 4.1;

  import std;
  import var;

  backend app {
      .host = "${s1_addr}";
      .port = "${s1_port}";
  }

  backend feeds {
      .host = "${s2_addr}";
      .port = "${s2_port}";
  }

  backend assets {
      .host = "${s3_addr}";
      .port = "${s3_port}";
  }

  sub vcl_recv {
    if (req.url == "/varnish_health") {
      return(synth(204));
    }

    if (req.http.host == "assets.tld") {
      set req.http.x-backend = "assets";
      return(hash);
    }

    if (req.url == "/podcast/feed") {
      set req.http.x-backend = "feeds";
      set req.url = "/podcast.xml";
      return(hash);
    }

    if (req.url == "/app_health") {
      set req.http.x-backend = "app";
      set req.url = "/health";
      return(pass);
    }

    if (req.url == "/feeds_health") {
      set req.http.x-backend = "feeds";
      set req.url = "/health";
      return(pass);
    }

    if (req.url == "/assets_health") {
     	set req.http.x-backend = "assets";
      set req.url = "/health";
      return(pass);
    }
  }

  sub vcl_hash {
    if (req.http.x-backend == "assets") {
      set req.backend_hint = assets;
      set req.http.x-backend-fqdn = "assets.tld";
    } else if (req.http.x-backend == "feeds") {
      set req.backend_hint = feeds;
      set req.http.x-backend-fqdn = "feeds.tld";
    } else {
      set req.backend_hint = app;
      set req.http.x-backend-fqdn = "app.tld";
    }
  }

  sub vcl_pass {
    # Bypass caching
    set req.http.x-bypass = "true";
    if (req.http.x-backend == "assets") {
      set req.backend_hint = assets;
      set req.http.x-backend-fqdn = "assets.tld";
    } else if (req.http.x-backend == "feeds") {
      set req.backend_hint = feeds;
      set req.http.x-backend-fqdn = "feeds.tld";
    } else {
      set req.backend_hint = app;
      set req.http.x-backend-fqdn = "app.tld";
    }
  }

  sub vcl_deliver {
    set resp.http.cache-status = "EDGE";

    # Which region is serving this request?
    var.set("region", std.getenv("FLY_REGION"));
    if (var.get("region") == "") {
      var.set("region", "LOCAL");
    }
    set resp.http.cache-status = resp.http.cache-status + "; region=" + var.get("region");

    # Which origin is serving this request?
    set resp.http.cache-status = resp.http.cache-status + "; origin=" + req.backend_hint + "," + req.http.x-backend-fqdn;
    unset req.http.x-backend-fqdn;

    if (req.http.x-bypass == "true") {
      set resp.http.cache-status = resp.http.cache-status + "; bypass";
      return(deliver);
    }

    # What is the remaining TTL for this object?
    set resp.http.cache-status = resp.http.cache-status + "; ttl=" + obj.ttl;
    # What is the max object staleness permitted?
    set resp.http.cache-status = resp.http.cache-status + "; grace=" + obj.grace;

    # Did the response come from Varnish or from the backend?
    if (obj.hits > 0) {
      set resp.http.cache-status = resp.http.cache-status + "; hit";
    } else {
      set resp.http.cache-status = resp.http.cache-status + "; miss";
    }

    # Is this object stale?
    if (obj.hits > 0 && obj.ttl < std.duration(integer=0)) {
      set resp.http.cache-status = resp.http.cache-status + "; stale";
    }

    # How many times has this response been served from Varnish?
    set resp.http.cache-status = resp.http.cache-status + "; hits=" + obj.hits;
  }
} -start

# Varnish
client c1 {
  txreq -url "/varnish_health"
  rxresp
  expect resp.status == 204
  expect resp.http.cache-status -eq <undef>
} -run

# App health
client c2 {
  txreq -url "/app_health"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=app,app.tld; bypass"
} -run

# App homepage uncached
client c3 {
  txreq -url "/"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=app,app.tld; ttl=120.000; grace=10.000; miss; hits=0"
} -run

# App homepage cached
client c4 {
  txreq -url "/"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status ~ "EDGE; region=LOCAL; origin=app,app.tld; ttl=119.[0-9]+; grace=10.000; hit; hits=1"
} -run

# Feeds health
client c5 {
  txreq -url "/feeds_health"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=feeds,feeds.tld; bypass"
} -run

# Feeds uncached
client c6 {
  txreq -url "/podcast/feed"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=feeds,feeds.tld; ttl=120.000; grace=10.000; miss; hits=0"
} -run

# Feeds cached
client c7 {
  txreq -url "/podcast/feed"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status ~ "EDGE; region=LOCAL; origin=feeds,feeds.tld; ttl=119.[0-9]+; grace=10.000; hit; hits=1"
} -run

# Assets health
client c9 {
  txreq -url "/assets_health"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=assets,assets.tld; bypass"
} -run

# Assets uncached
client c10 {
  txreq -url "/static/images/podcasts/podcast-original-f16d0363067166f241d080ee2e2d4a28.png" -hdr "Host: assets.tld"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status == "EDGE; region=LOCAL; origin=assets,assets.tld; ttl=120.000; grace=10.000; miss; hits=0"
} -run

# Assets cached
client c11 {
  txreq -url "/static/images/podcasts/podcast-original-f16d0363067166f241d080ee2e2d4a28.png" -hdr "Host: assets.tld"
  rxresp
  expect resp.status == 200
  expect resp.http.cache-status ~ "EDGE; region=LOCAL; origin=assets,assets.tld; ttl=119.[0-9]+; grace=10.000; hit; hits=1"
} -run
