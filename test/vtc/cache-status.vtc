varnishtest "Test cache-status header"

# App mock server
server s1 {
    rxreq
    txresp -status 200 -body "App backend"
} -start

# Feeds mock server
server s2 {
    rxreq
    txresp -status 200 -body "Feeds backend"
} -start

# Start Varnish with a VCL close to our final one
# FWIW, we don't use dynamic directors so that we don't need to handle variable timing & delay
varnish v1 -vcl {
    vcl 4.1;

    import std;
    import var;

    backend app {
        .host = "${s1_addr}";
        .port = "${s1_port}";
    }
    
    backend feeds {
        .host = "${s2_addr}";
        .port = "${s2_port}";
    }

    sub vcl_recv {
        if (req.url == "/varnish_health") {
            return(synth(204));
        }

        set req.http.x-backend = "";

        if (req.url == "/app_health") {
            set req.url = "/health";
        }

        if (req.url == "/feeds_health") {
            set req.http.x-backend = "feeds";
            set req.url = "/health";
        }

        if (req.http.x-backend == "feeds") {
            set req.backend_hint = feeds;
            set req.http.x-backend-fqdn = "feeds.tld";
        } else {
            set req.backend_hint = app;
            set req.http.x-backend-fqdn = "app.tld";
        }

        unset req.http.x-backend;
    }

    sub vcl_backend_response {
        if (bereq.url == "/health") {
            # Disable caching for health check requests
            set beresp.uncacheable = true;
            set beresp.ttl = 0s;
            return(deliver);
        }
        
        # Normal caching for other requests
        return(deliver);
    }

    sub vcl_deliver {
        set resp.http.cache-status = "EDGE";

        # Which region is serving this request?
        var.set("region", std.getenv("FLY_REGION"));
        if (var.get("region") == "") {
               var.set("region", "LOCAL");
        }
        set resp.http.cache-status = resp.http.cache-status + "; region=" + var.get("region");

        # Which origin is serving this request?
        set resp.http.cache-status = resp.http.cache-status + "; origin=" + req.backend_hint + "," + req.http.x-backend-fqdn;
        unset req.http.x-backend-fqdn;

        # What is the remaining TTL for this object?
        set resp.http.cache-status = resp.http.cache-status + "; ttl=" + obj.ttl;
        # What is the max object staleness permitted?
        set resp.http.cache-status = resp.http.cache-status + "; grace=" + obj.grace;

        # Did the response come from Varnish or from the backend?
        if (obj.hits > 0) {
              set resp.http.cache-status = resp.http.cache-status + "; hit";
        } else {
              set resp.http.cache-status = resp.http.cache-status + "; miss";
        }

        # Is this object stale?
        if (obj.hits > 0 && obj.ttl < std.duration(integer=0)) {
              set resp.http.cache-status = resp.http.cache-status + "; stale";
        }

        # How many times has this response been served from Varnish?
        set resp.http.cache-status = resp.http.cache-status + "; hits=" + obj.hits;
    }
} -start

# Varnish
client c1 {
    txreq -url "/varnish_health"
    rxresp
    expect resp.status == 204
    expect resp.http.cache-status -eq <undef>
} -run

# App backend
client c2 {
    txreq -url "/app_health"
    rxresp
    expect resp.status == 200
    expect resp.http.cache-status == "EDGE; region=LOCAL; origin=app,app.tld; ttl=-0.000; grace=10.000; miss; hits=0"
} -run

# Feeds backend
client c3 {
    txreq -url "/feeds_health"
    rxresp
    expect resp.status == 200
    expect resp.http.cache-status == "EDGE; region=LOCAL; origin=feeds,feeds.tld; ttl=-0.000; grace=10.000; miss; hits=0"
} -run
